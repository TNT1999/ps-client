import Breadcrumb from '@components/breadcrumb';
import Divider from '@components/common/Divider';
import Layout from '@components/common/Layout';
import SideBar from '@components/common/user/SideBar';
import classNames from 'classnames';
import { NextPage, NextPageContext } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { Store } from '@reduxjs/toolkit';
import { parseCookies } from 'nookies';
import axiosClient from '@utils/api';
import dayjs from '@utils/dayjs';
import { formatMoney } from '@utils/index';
import ReviewModal from '@components/common/user/ReviewModal';

enum Status {
  ALL = 'all',
  AWAITING_PAYMENT = 'awaiting_payment',
  PROCESSING = 'processing',
  SHIPPING = 'shipping',
  COMPLETED = 'completed',
  CANCELED = 'canceled'
}
type Props = {
  order: any;
};
const DetailOrderPage: NextPage<Props> = ({ order }) => {
  const [visibleReviewModal, setVisibleReviewModal] = useState(false);
  return (
    <Layout>
      <Head>
        <title>Chi tiết đơn hàng</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center overflow-auto h-main bg-main">
        <div className="max-w-screen-xl w-full px-4">
          <div className="p-4 justify-center flex-col flex gap-x-4">
            <Breadcrumb
              breadcrumbs={[
                { value: 'Trang chủ', href: '/dien-thoai' },
                { value: 'Đơn hàng của tôi', href: '/user/order' }
              ]}
            />
            <Divider />
          </div>
          <div className="flex">
            <SideBar active="order" />
            <div className="flex-1 text-13 text-[#242424]">
              <div className="text-2xl font-light mt-1 mb-4">
                {`Chi tiết đơn hàng - #${order.orderId}`}
              </div>
              {/* <div>Time line</div> */}
              <div className="text-right mb-8 capitalize">{`Ngày đặt hàng: ${dayjs(
                order.createdAt
              ).format('HH:mm dddd DD/MM/YYYY')}`}</div>
              <div className="flex mt-3 mb-5 gap-x-2 text-13">
                <div className="flex-1 text-[#000000a6]">
                  <div className="uppercase mb-4 text-[#242424]">
                    Địa chỉ người nhận
                  </div>
                  <div className="flex flex-col bg-white rounded p-3 text-13">
                    <p className="text-[#242424] uppercase font-medium mt-1">
                      {order.shippingAddress.name}
                    </p>
                    <p className="mt-1">
                      <span className="text-[#4a4a4a] font-light">
                        Địa chỉ:{' '}
                      </span>
                      {`${order.shippingAddress.address}, ${order.shippingAddress.ward}, ${order.shippingAddress.district}, ${order.shippingAddress.province}`}
                    </p>
                    <p className="mt-1">
                      <span className="text-[#4a4a4a] font-light">
                        Điện thoại:{' '}
                      </span>
                      {order.shippingAddress.phone}
                    </p>
                  </div>
                </div>
                <div className="flex flex-col flex-1 text-[#000000a6]">
                  <div className="uppercase mb-4 text-[#242424]">
                    Hình thức giao hàng
                  </div>
                  <div className="flex flex-col bg-white rounded p-3 flex-1">
                    <p className="mt-1">Giao hàng tiêu chuẩn</p>
                    <p className="mt-3 italic text-[#00ab56]">
                      Giao vào{' '}
                      <span className="capitalize">
                        {dayjs(order.shippingInfo.deliveredAt).format(
                          'dddd, DD/MM'
                        )}
                      </span>
                    </p>
                  </div>
                </div>
                <div className="flex flex-col flex-1 text-[#000000a6]">
                  <div className="uppercase mb-4 text-[#242424]">
                    Hình thức thanh toán
                  </div>
                  <div className="flex flex-col bg-white rounded p-3 flex-1">
                    <p className="mt-1">Thanh toán bằng VNPay</p>
                    <p className="italic text-[#fda223] mt-3 font-light">
                      Thanh toán thành công
                    </p>
                  </div>
                </div>
              </div>

              <table className="w-full table break-words text-[#424242] text-13 bg-white rounded border-collapse border-spacing-0">
                <thead>
                  <tr>
                    <th className="table-cell text-[#787878] text-left border-b border-[#f4f4f4] text-base font-normal py-5 px-4 min-w-[100px]">
                      Sản phẩm
                    </th>
                    <th className="table-cell text-[#787878] text-left border-b border-[#f4f4f4] text-base font-normal py-5 px-4 min-w-[100px]">
                      Giá
                    </th>
                    <th className="table-cell text-[#787878] text-left border-b border-[#f4f4f4] text-base font-normal py-5 px-4 min-w-[100px]">
                      Số lượng
                    </th>
                    <th className="table-cell text-[#787878] text-right border-b border-[#f4f4f4] text-base font-normal py-5 px-4 min-w-[100px]">
                      Tạm tính
                    </th>
                  </tr>
                </thead>
                <tbody>
                  <tr className="hover:bg-[#f6fcff] border border-b border-[#f4f4f4]">
                    <td className="border-none table-cell py-5 px-4 align-top min-w-[100px] text-[#242424]">
                      <div className="flex">
                        <img
                          className="mr-4 w-16 h-16"
                          src={order.products[0].option.images[0]}
                          alt={`${order.products[0].name} - ${order.products[0].option.name}`}
                        />
                        <div>
                          <a className="text-[#242424]">
                            {`${order.products[0].name} - ${order.products[0].option.name}`}
                          </a>
                          <div className="flex gap-x-2 mt-4">
                            {visibleReviewModal && (
                              <ReviewModal
                                onClose={() => setVisibleReviewModal(false)}
                                product={order.products[0]}
                              />
                            )}
                            <div
                              className="bg-white rounded cursor-pointer text-[12px] py-[6px] px-3 text-[#189eff] border border-[#189eff]"
                              onClick={() => setVisibleReviewModal(true)}
                            >
                              Viết nhận xét
                            </div>
                            <div className="bg-white rounded cursor-pointer text-[12px] py-[6px] px-3 text-[#189eff] border border-[#189eff]">
                              Mua lại
                            </div>
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="border-none table-cell py-5 px-4 align-top min-w-[100px] text-[#242424] whitespace-nowrap">
                      {formatMoney(order.products[0].option.price)}
                    </td>
                    <td className="border-none table-cell py-5 px-4 align-top min-w-[100px] text-[#242424]">
                      x{order.products[0].quantity}
                    </td>
                    <td className="border-none table-cell py-5 px-4 align-top text-[#242424] text-right min-w-[160px]">
                      {formatMoney(
                        order.products[0].option.price *
                          order.products[0].quantity
                      )}
                    </td>
                  </tr>
                </tbody>
                <tfoot>
                  <tr className="table-row p-3">
                    <td
                      colSpan={3}
                      className="text-right table-cell py-2 px-5 text-[#242424] max-w-[550px] min-w-[125px] pt-8"
                    >
                      <span className="text-[#787878] text-base">Tạm tính</span>
                    </td>
                    <td className="text-right table-cell py-2 px-5 text-[#242424] max-w-[550px] min-w-[125px] pt-8">
                      {formatMoney(order.finalTotal)}
                    </td>
                  </tr>
                  <tr className="table-row p-3">
                    <td
                      colSpan={3}
                      className="text-right table-cell py-2 px-5 text-[#242424] max-w-[550px] min-w-[125px]"
                    >
                      <span className="text-[#787878] text-base">
                        Phí vận chuyển
                      </span>
                    </td>
                    <td className="text-right table-cell py-2 px-5 text-[#242424] max-w-[550px] min-w-[125px]">
                      {formatMoney(order.shippingInfo.total)}
                    </td>
                  </tr>
                  <tr className="table-row p-3">
                    <td
                      colSpan={3}
                      className="text-right table-cell py-2 px-5 text-[#242424] max-w-[550px] min-w-[125px] pb-8"
                    >
                      <span className="text-[#787878] text-base">
                        Tổng cộng
                      </span>
                    </td>
                    <td className="text-right table-cell py-2 px-5 text-[#ff3b27] text-xl max-w-[550px] min-w-[125px] pb-8">
                      {formatMoney(order.finalTotal)}
                    </td>
                  </tr>
                </tfoot>
              </table>
            </div>
          </div>
        </div>
      </main>
    </Layout>
  );
};

DetailOrderPage.getInitialProps = async (
  context: NextPageContext & { store: Store }
) => {
  const cookies = parseCookies(context);
  const TOKENS = cookies['TOKENS'] || '{}';
  const TOKENS_VALUE = JSON.parse(TOKENS);
  try {
    const order = await axiosClient.get(`/order/${context.query.id}`, {
      headers: {
        Authorization: TOKENS_VALUE.accessToken
          ? `Bearer ${TOKENS_VALUE.accessToken}`
          : ''
      }
    });
    return { order };
  } catch (err) {
    return {
      order: null
    };
  }
};

export default DetailOrderPage;
