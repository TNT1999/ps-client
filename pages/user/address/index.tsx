import { CheckCircleIcon, Edit2Icon, PlusIcon, TrashIcon } from '@assets/icons';
import Breadcrumb from '@components/breadcrumb';
import Divider from '@components/common/Divider';
import Layout from '@components/common/Layout';
import SideBar from '@components/common/user/SideBar';
import classNames from 'classnames';
import { isEmpty } from 'lodash';
import { NextPage, NextPageContext } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { useState } from 'react';
import Tippy from '@tippyjs/react';
import Tooltip from '@components/common/Tooltip';
import axiosClient from '@utils/api';
import { Store } from '@reduxjs/toolkit';
import { parseCookies } from 'nookies';
import { setAddress } from '@app/slice/authSlice';
import { AddressType } from '@types';

type Props = {
  addressProps: AddressType[] | null;
};
const AddressPage: NextPage<Props> = ({ addressProps }) => {
  const [address, setAddress] = useState(addressProps || []);
  return (
    <Layout>
      <Head>
        <title>Địa chỉ của tôi</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center overflow-auto h-main bg-main">
        <div className="max-w-screen-xl w-full px-4">
          <div className="p-4 justify-center flex-col flex gap-x-4">
            <Breadcrumb
              breadcrumbs={[
                { value: 'Trang chủ', href: '/dien-thoai' },
                { value: 'Địa chỉ của tôi', href: '/address' }
              ]}
            />
            <Divider className="mt-0 mb-4" />
          </div>
          <div className="flex">
            <SideBar active="address" />
            <div className="flex-1">
              <div className="text-2xl font-light mt-1 mb-4">
                Địa chỉ của tôi
              </div>
              <div>
                <Link href={'/user/address/create'}>
                  <a className="h-14 border-px border-dashed border-[#d8d8d8] mb-3 flex items-center justify-center bg-white text-base">
                    <PlusIcon className="mx-4 text-[#787878]" />
                    <span>Thêm địa chỉ mới</span>
                  </a>
                </Link>
                {!isEmpty(address) &&
                  address.map((item, _) => {
                    return (
                      <div
                        key={item.id}
                        className="bg-white rounded flex justify-between text-13 p-5 mb-3 last:mb-0"
                      >
                        <div>
                          <div className="uppercase mb-3 flex">
                            {item.name}
                            {item.isDefault && (
                              <span className="flex items-center text-green-500 text-[12px] normal-case ml-5">
                                <CheckCircleIcon className="w-3.5 h-3.5 mr-2" />
                                <span>Địa chỉ mặc định</span>
                              </span>
                            )}
                          </div>
                          <div className="mb-2">
                            <span className="text-[#787878]">Địa chỉ: </span>
                            {`${item.address}, ${item.ward}, ${item.district}, ${item.province}`}
                          </div>
                          <div>
                            <span className="text-[#787878]">Điện thoại: </span>
                            {item.phone}
                          </div>
                        </div>
                        <div className="flex h-fit">
                          <Tippy
                            arrow={true}
                            content={<Tooltip text={'Chỉnh sửa'} />}
                            delay={100}
                          >
                            <span
                              className={classNames({
                                'mr-5': !item.isDefault
                              })}
                            >
                              <Edit2Icon className="w-5 h-5 text-gray-500 cursor-pointer" />
                            </span>
                          </Tippy>
                          {!item.isDefault && (
                            <>
                              <Tippy
                                arrow={true}
                                content={<Tooltip text={'Xoá'} />}
                                delay={100}
                              >
                                <span>
                                  <TrashIcon className="w-5 h-5 text-red-500 cursor-pointer" />
                                </span>
                              </Tippy>
                            </>
                          )}
                        </div>
                      </div>
                    );
                  })}
              </div>
            </div>
          </div>
        </div>
      </main>
    </Layout>
  );
};

AddressPage.getInitialProps = async (
  context: NextPageContext & { store: Store }
) => {
  const cookies = parseCookies(context);
  const TOKENS = cookies['TOKENS'] || '{}';
  const TOKENS_VALUE = JSON.parse(TOKENS);
  try {
    const address: AddressType[] = await axiosClient.get('/address', {
      headers: {
        Authorization: TOKENS_VALUE.accessToken
          ? `Bearer ${TOKENS_VALUE.accessToken}`
          : ''
      }
    });
    context.store.dispatch(setAddress(address));
    return { addressProps: address };
  } catch (err) {
    return {
      addressProps: null
    };
  }
};
export default AddressPage;
