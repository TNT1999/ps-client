import {
  CartItemType,
  CartState,
  setCart,
  updateSelectedCartItem
} from '@app/slice/cartSlice';
import { RootState, Store, useAppDispatch } from '@app/store';
import { CouponIcon, TrashIcon, TruckIcon } from '@assets/icons';
import Layout from '@components/common/Layout';
import axiosClient from '@utils/api';
import { formatMoney } from '@utils/index';
import { NextPage, NextPageContext } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { toast } from 'react-toastify';
import { parseCookies } from 'nookies';
import isEmpty from 'lodash/isEmpty';
import Link from 'next/link';
import ConfirmDeleteModal from '@components/common/checkout/cart/ConfirmDeleteModal';
import CartItem from '@components/common/checkout/cart/CartItem';
import { useSelector } from 'react-redux';
import Tooltip from '@components/common/Tooltip';
import Tippy from '@tippyjs/react';
import useAsyncEffect from 'use-async-effect';
import { setAddress } from '@app/slice/authSlice';
import { AddressType } from '@types';
import SelectAddressDrawer from '@components/common/checkout/cart/SelectAddressDrawer';

const CartPage: NextPage<any> = () => {
  const cart: CartState = useSelector((state: RootState) => state.cart);
  const shippingAddress = cart.shippingAddress;

  const [total, setTotal] = useState(0);
  const dispatch = useAppDispatch();
  const router = useRouter();
  const [confirmDeleteVisible, setConfirmDeleteVisible] = useState(false);

  const [selectedAllCartItem, setSelectedAllCartItem] = useState(
    cart.items.every((item) => item.selected === true)
  );
  const atLeastOneItemSelected = cart.items.some(
    (item) => item.selected === true
  );

  const [visibleSelectAddress, setVisibleSelectAddress] = useState(false);
  // const [defaultAddress, setDefaultAddress] = useState<AddressType>();
  // const defaultAddress = useSelector(
  //   (state: RootState) => state.auth.address
  // )?.find((item) => item.isDefault === true);

  // useAsyncEffect(async () => {
  //   try {
  //     const address: AddressType = await axiosClient.get('address/default');
  //     setDefaultAddress(address);
  //   } catch (err) {
  //     console.log(err);
  //   }
  // }, []);

  // const [checkoutCart, setCheckoutCart] = useState<any>(cart);

  // const handleChangeProductToCheckoutCart = (id: string, checked: boolean) => {
  //   if (checked) {
  //     //add
  //     const product = cart.listProduct.find((product) => product.id === id);
  //     setCheckoutCart([...checkoutCart, product]);
  //     return;
  //   }
  //   //remove
  //   const newCheckoutCart = checkoutCart.filter(
  //     (product: CartType) => product.id !== id
  //   );
  //   setCheckoutCart([...newCheckoutCart]);
  // };
  useEffect(() => {
    const selectedAllCartItem = cart.items.every(
      (item) => item.selected === true
    );
    setSelectedAllCartItem(selectedAllCartItem);
  }, [cart.items]);

  const handleUpdateSelectedAllCartItem = async (selected: boolean) => {
    try {
      await dispatch(
        updateSelectedCartItem({
          selected
        })
      ).unwrap();
      // toast.success('Cập nhật sản phẩm thành công', {
      //   autoClose: 1000
      // });
    } catch (err) {
      toast.error('Cập nhật sản phẩm thất bại', {
        autoClose: 1000
      });
    }
  };

  useEffect(() => {
    const totalPrice = cart.items
      .filter((item) => item.selected === true)
      .reduce((accumulator, currentValue) => {
        const price = currentValue.discount
          ? currentValue.option.price * 0.01 * (100 - currentValue.discount)
          : currentValue.option.price;
        return (accumulator += currentValue.quantity * price);
      }, 0);
    setTotal(totalPrice);
  }, [cart]);
  return (
    <Layout>
      <Head>
        <title>Giỏ hàng</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center overflow-auto h-main bg-main">
        <div className="max-w-screen-xl w-full px-4">
          <div className="my-5 mx-0">
            <h4 className=" uppercase text-xl m-0 leading-7 text-black">
              Giỏ hàng
            </h4>
          </div>
          <div className="flex flex-nowrap justify-between basis-full">
            {!isEmpty(cart.items) ? (
              <div className="flex-1 basis-[910px] mb-4">
                <div>
                  <div className="bg-white py-2 px-4 rounded text-13 mb-3 text-[#242424] font-normal sticky flex items-center  after:contents after:h-3 after:w-full after:inset-x-0 after:-bottom-3 after:absolute">
                    <span className="flex w-[398px] items-center">
                      <input
                        id="all-product"
                        name="color[]"
                        value="white"
                        type="checkbox"
                        className="h-4 w-4 border-gray-300 rounded-lg text-indigo-600 focus:ring-indigo-500"
                        onChange={(e) =>
                          handleUpdateSelectedAllCartItem(e.target.checked)
                        }
                        checked={selectedAllCartItem}
                      />
                      <label
                        htmlFor="all-product"
                        className="ml-3 min-w-0 flex-1 text-gray-600 text-sm"
                      >
                        {' '}
                        {`Tất cả (${cart.items.length} sản phẩm)`}{' '}
                      </label>
                    </span>
                    <span className="inline-block w-[190px]">Đơn giá</span>
                    <span className="inline-block w-[130px]">Số lượng</span>
                    <span className="inline-block w-[130px]">Thành tiền</span>
                    <span
                      className="w-[35px] flex justify-end cursor-pointer"
                      onClick={() => setConfirmDeleteVisible(true)}
                    >
                      <Tippy
                        arrow={true}
                        content={<Tooltip text={'Xoá mục đã chọn'} />}
                        delay={100}
                      >
                        <span>
                          <TrashIcon className="h-[16px] w-[16px] text-gray-400 hover:text-gray-500 cursor-pointer" />
                        </span>
                      </Tippy>
                    </span>
                    {confirmDeleteVisible && (
                      <ConfirmDeleteModal
                        onClose={() => setConfirmDeleteVisible(false)}
                        isDeleteSelected={true}
                        productId={''}
                        optionId={''}
                      />
                    )}
                  </div>
                  <div>
                    <div className="h-auto overflow-auto">
                      <div className="bg-white rounded mb-3">
                        <div className="px-4 py-2">
                          {cart.items.map((item, index) => {
                            return (
                              <CartItem
                                key={`${item.productId}-${item.option.id}`}
                                item={item}
                              />
                            );
                          })}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <div className="flex-1">
                <div className="mb-24">
                  <div className="bg-white rounded text-center w-full py-10 px-5">
                    <img
                      src="https://salt.tikicdn.com/desktop/img/mascot@2x.png"
                      alt=""
                      className="w-[190px] inline-block"
                    />
                    <p className="mt-4 mb-8">
                      Không có sản phẩm nào trong giỏ hàng của bạn.
                    </p>
                    <Link href="/dien-thoai">
                      <a className="bg-[#fdd835] text-[#4a4a4a] font-medium inline-block rounded py-3 px-14">
                        Tiếp tục mua sắm
                      </a>
                    </Link>
                  </div>
                </div>
              </div>
            )}
            {!isEmpty(cart.items) && (
              <div className="flex-1 basis-[calc(100%-930px)] ml-5 mb-4">
                <div>
                  <div>
                    <div className="bg-white rounded p-4 mb-4">
                      <div className="flex justify-between mb-4">
                        <h3 className="flex items-center font-medium text-13 text-[#38383d]">
                          <TruckIcon className="mr-2 h-5 w-5" />
                          <span>Địa chỉ</span>
                        </h3>
                        <a
                          className="cursor-pointer"
                          onClick={() => setVisibleSelectAddress(true)}
                        >
                          Thay đổi
                        </a>
                        {visibleSelectAddress && (
                          <SelectAddressDrawer
                            onClose={() => setVisibleSelectAddress(false)}
                            selectedAddressId={shippingAddress?.id}
                          />
                        )}
                      </div>
                      <div className="flex flex-nowrap justify-between space-x-3 mt-4 h-10">
                        <div className="flex flex-1 items-center font-semibold mb-1 text-[#38383d]">
                          {shippingAddress ? (
                            <>
                              <p>{shippingAddress?.name}</p>
                              <i className="block w-px mx-3 h-full bg-[#ebebf0]"></i>
                              <p> {shippingAddress?.phone}</p>
                            </>
                          ) : (
                            <div className="animate-pulse flex flex-1 gap-4">
                              <div className="h-5 bg-zinc-200 rounded flex-2"></div>
                              <div className="h-5 bg-zinc-200 rounded flex-1"></div>
                            </div>
                          )}
                        </div>
                      </div>
                      <div className="text-[#808089]">
                        {shippingAddress ? (
                          `${shippingAddress?.address}, ${shippingAddress?.ward}, ${shippingAddress?.district}, ${shippingAddress?.province}`
                        ) : (
                          <div className="animate-pulse">
                            <div className="h-5 bg-zinc-200 rounded-md"></div>
                            <div className="h-5 bg-zinc-200 rounded-md w-2/5 mt-1"></div>
                          </div>
                        )}
                      </div>
                    </div>
                    {/* <div className="bg-white rounded p-4 mb-4">
                      <h4 className="flex items-center font-medium text-13 text-[#242424]">
                        <CouponIcon className="mr-2" />
                        <span>Khuyến mãi</span>
                      </h4>
                      <div className="flex flex-nowrap justify-between space-x-3 mt-4 h-10">
                        <input
                          className="flex-1 py-3 px-2 border outline-none rounded w-auto block placeholder:text-13 text-gray-500"
                          placeholder="Nhập mã..."
                        />
                        <button className="bg-blue-400 text-white text-center block cursor-pointer rounded p-2 hover:bg-blue-500">
                          Áp dụng
                        </button>
                      </div>
                    </div> */}
                  </div>
                  <div>
                    <div className="bg-white rounded pb-2">
                      <ul className=" list-none px-5 py-4 border-b-px border-[#f4f4f4]">
                        <li className="flex flex-nowrap mb-2.5 justify-between">
                          <div className="font-light text-[#333333]">
                            Tạm tính
                          </div>
                          <div>{formatMoney(total)}</div>
                        </li>
                        {/* <li className="flex flex-nowrap mb-2.5 justify-between">
                          <div className=" font-light text-[#333333]">
                            Giảm giá
                          </div>
                          <div>0đ</div>
                        </li> */}
                      </ul>
                      <div className="py-4 px-5 flex flex-nowrap justify-between">
                        <span className="font-light text-[#333333]">
                          Tổng tiền
                        </span>
                        <div>
                          {!atLeastOneItemSelected ? (
                            <div className="text-[15px] font-medium text-right text-[#fe3834]">
                              Vui lòng chọn sản phẩm
                            </div>
                          ) : (
                            <div className="text-[22px] font-normal text-right text-red-600">
                              {formatMoney(total)}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                  <button
                    className="bg-red-500 text-white text-center w-full block cursor-pointer rounded mt-4 py-3 px-2 border-none hover:opacity-80"
                    onClick={() => router.push('/checkout/payment')}
                  >{`Mua hàng (${
                    cart.items.filter((item) => item.selected === true).length
                  })`}</button>
                </div>
              </div>
            )}
          </div>
        </div>
      </main>
    </Layout>
  );
};

CartPage.getInitialProps = async (
  context: NextPageContext & { store: Store }
) => {
  const cookies = parseCookies(context);
  const TOKENS = cookies['TOKENS'] || '{}';
  const TOKENS_VALUE = JSON.parse(TOKENS);
  try {
    const cart: CartState = await axiosClient.get('/cart', {
      headers: {
        Authorization: TOKENS_VALUE.accessToken
          ? `Bearer ${TOKENS_VALUE.accessToken}`
          : ''
      }
    });
    context.store.dispatch(setCart(cart));
    return { cart: cart };
  } catch (err) {
    return {
      cart: {
        items: []
      }
    };
  }
};
export default CartPage;
