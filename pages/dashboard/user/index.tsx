import Head from 'next/head';
import { NextPage } from 'next';
import Layout from '@components/common/Layout';
import { useEffect, useState, FunctionComponent } from 'react';
import axiosClient from '@utils/api';
import useAsyncEffect from 'use-async-effect';
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  SearchIcon,
  SpinnerIcon,
  TrashIcon
} from '@assets/icons';
import Tooltip from '@components/common/Tooltip';
import Tippy from '@tippyjs/react';
import UserAvatar from '@components/common/Avatar';
import dayjs from '@utils/dayjs';
import ReactPaginate from 'react-paginate';
import dynamic from 'next/dynamic';
import { motion } from 'framer-motion';
import { delay } from '@utils/misc';
const NavigationMenu = dynamic(
  () => import('@components/admin/navigation/NavigationMenu'),
  {
    ssr: false
  }
);
type Props = any;

const Loading: FunctionComponent<any> = () => {
  return (
    <div className="h-full w-full flex items-center justify-center bg-transparent select-none">
      <div className="flex items-center">
        <SpinnerIcon className="animate-spin mr-2" /> Loading...
      </div>
    </div>
  );
};

const items = [...Array(70).keys()];

const ListUserPage: NextPage<Props> = () => {
  const [users, setUsers] = useState<any[]>([]);
  const [itemsPerPage] = useState(10);
  const [isPreLoading, setPreLoading] = useState(false);
  const [itemOffset, setItemOffset] = useState(0);
  const [currentItems, setCurrentItems] = useState(null);
  const [pageCount, setPageCount] = useState(0);

  useAsyncEffect(async () => {
    setPreLoading(true);
    const [result] = await Promise.all([
      axiosClient.get('origin/users'),
      delay(500)
    ]);
    setUsers(result as any);
    setPreLoading(false);
  }, []);

  useEffect(() => {
    // Fetch items from another resources.
    const endOffset = itemOffset + itemsPerPage;
    console.log(`Loading items from ${itemOffset} to ${endOffset}`);
    setCurrentItems(items.slice(itemOffset, endOffset) as any);
    setPageCount(Math.ceil(items.length / itemsPerPage));
  }, [itemOffset, itemsPerPage]);

  // Invoke when user click to request another page.
  // const handlePageClick = (event: any) => {
  //   const newOffset = (event.selected * itemsPerPage) % items.length;
  //   console.log(
  //     `User requested page number ${event.selected}, which is offset ${newOffset}`
  //   );
  //   setItemOffset(newOffset);
  // };
  return (
    <Layout admin>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center overflow-auto md:h-[calc(100vh-4rem)] h-[calc(100vh-3.5rem)] bg-main">
        <div className="flex flex-row flex-1">
          <NavigationMenu />
          <div className="flex-1 h-full max-h-full overflow-y-auto">
            <div className="max-w-screen-xl m-auto h-full">
              {isPreLoading ? (
                <Loading />
              ) : (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.3 }}
                  className="p-4"
                >
                  <div className="">
                    <div className="flex items-center justify-between pb-4">
                      <div>
                        <h2 className="text-black font-medium text-xl">
                          Danh sách người dùng
                        </h2>
                      </div>
                      {/* <div className="flex items-center justify-between">
                        <div className="flex bg-white items-center p-2.5 rounded-full shadow-sm w-80">
                          <SearchIcon className="h-6 w-6 text-gray-400" />
                          <input
                            className="outline-none ml-2 block w-full"
                            type="text"
                            name=""
                            id=""
                            placeholder="Search..."
                          />
                        </div>
                      </div> */}
                    </div>
                    <div className="bg-white rounded-lg w-full">
                      <div className="p-2">
                        <div className="inline-block min-w-full rounded-lg overflow-hidden">
                          <table className="min-w-full leading-normal">
                            <thead>
                              <tr>
                                <th className="px-5 py-3 bg-blue-50 text-left font-semibold text-gray-600 tracking-wider rounded-l-lg">
                                  Name
                                </th>
                                <th className="px-5 py-3 bg-blue-50 text-left font-semibold text-gray-600 tracking-wider">
                                  Email
                                </th>
                                <th className="px-5 py-3 bg-blue-50 text-left font-semibold text-gray-600 tracking-wider">
                                  Create At
                                </th>
                                <th className="px-5 py-3 bg-blue-50 font-semibold text-gray-600 tracking-wider">
                                  Status
                                </th>
                                {/* <th className="px-5 py-3 bg-blue-50 text-right font-semibold text-gray-600 tracking-wider rounded-r-lg">
                                  Action
                                </th> */}
                              </tr>
                            </thead>
                            <tbody>
                              {users.map((user, index) => {
                                return (
                                  <tr key={user.id}>
                                    <td className="px-5 py-5 border-b border-gray-200 bg-white">
                                      <div className="flex items-center flex-shrink-0">
                                        <UserAvatar name={user.name} />
                                        <div className="ml-5">{user.name}</div>
                                      </div>
                                    </td>
                                    <td className="px-5 py-5 border-b border-gray-200 bg-white">
                                      <p className="text-gray-900 whitespace-no-wrap text-left">
                                        {user.email}
                                      </p>
                                    </td>
                                    <td className="px-5 py-5 border-b border-gray-200 bg-white">
                                      <p className="text-gray-900 whitespace-no-wrap">
                                        {dayjs(user.createdAt).format(
                                          'DD/MM/YYYY'
                                        )}
                                      </p>
                                    </td>
                                    <td className="px-5 py-5 border-b border-gray-200 bg-white">
                                      <div className="flex justify-center items-center">
                                        <p className="whitespace-no-wrap bg-green-200 text-green-600 w-fit py-1 px-3 rounded-full text-xs">
                                          Active
                                        </p>
                                      </div>
                                    </td>
                                    {/* <td className="px-5 py-5 border-b border-gray-200 bg-white">
                                      <div className="flex justify-end">
                                        <span className="flex items-center text-[#616c7a]">
                                          <Tippy
                                            arrow={true}
                                            placement={'top'}
                                            content={
                                              <Tooltip text={'Delete'} />
                                            }
                                            delay={100}
                                          >
                                            <span>
                                              <TrashIcon className="h-5 w-5 m-[0.4375rem] text-red-500 cursor-pointer" />
                                            </span>
                                          </Tippy>
                                        </span>
                                      </div>
                                    </td> */}
                                  </tr>
                                );
                              })}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>
                  </div>
                  {/* <ReactPaginate
                    breakLabel="..."
                    onPageChange={handlePageClick}
                    pageRangeDisplayed={3}
                    pageCount={pageCount}
                    className="flex justify-end h-10 font-medium rounded-full mt-4 select-none"
                    activeClassName="bg-[#189eff]"
                    activeLinkClassName="!text-white"
                    pageLinkClassName="w-full h-full flex items-center justify-center text-black"
                    previousLinkClassName="w-full h-full flex items-center justify-center text-black"
                    nextLinkClassName="w-full h-full flex items-center justify-center text-black"
                    breakClassName="w-10 block md:flex justify-center items-center cursor-pointer leading-5 transition duration-150 ease-in rounded-full text-base bg-white shadow-sm mr-1 !bg-transparent"
                    pageClassName="w-10 block md:flex justify-center items-center cursor-pointer leading-5 transition duration-150 ease-in rounded-full text-base bg-white shadow-sm mr-1 hover:bg-[#c1e7ff]"
                    previousClassName="w-10 block md:flex justify-center items-center cursor-pointer leading-5 transition duration-150 ease-in rounded-full text-base bg-white shadow-sm mr-1 !bg-transparent hover:bg-gray-500"
                    nextClassName="w-10 block md:flex justify-center items-center cursor-pointer leading-5 transition duration-150 ease-in rounded-full text-base bg-white shadow-sm mr-1 !bg-transparent hover:bg-gray-500"
                    renderOnZeroPageCount={() => null}
                    disabledClassName="opacity-30"
                    nextLabel={
                      <ChevronRightIcon
                        className="h-5 w-5"
                        aria-hidden="true"
                      />
                    }
                    previousLabel={
                      <ChevronLeftIcon className="h-5 w-5" aria-hidden="true" />
                    }
                  /> */}
                </motion.div>
              )}
            </div>
          </div>
        </div>
      </main>
    </Layout>
  );
};

export default ListUserPage;
