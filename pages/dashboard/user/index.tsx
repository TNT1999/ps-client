import Head from 'next/head';
import { NextPage } from 'next';
import NavigationMenu from '@components/admin/navigation/NavigationMenu';
import Layout from '@components/common/Layout';
import CreateProductEditor from '@components/admin/editor/Editor';
import { useEffect, useState, FunctionComponent } from 'react';
import axiosClient from '@utils/api';
import useAsyncEffect from 'use-async-effect';
import { isEmpty } from 'lodash';
import {
  Edit2Icon,
  EditIcon,
  EyeIcon,
  SpinnerIcon,
  TrashIcon
} from '@assets/icons';
import { Col, Row, Table, User, Text, Pagination } from '@nextui-org/react';
import { UserType } from '@types';
import Tooltip from '@components/common/Tooltip';
import Tippy from '@tippyjs/react';
import UserAvatar from '@components/common/Avatar';
import dayjs from '@utils/dayjs';

type Props = any;

const Loading: FunctionComponent<any> = () => {
  return (
    <div className="h-full w-full flex items-center justify-center bg-white select-none">
      <div className="flex items-center justify-center">
        <SpinnerIcon className="animate-spin mr-2" /> Loading...
      </div>
    </div>
  );
};

const ListUserPage: NextPage<Props> = () => {
  const [users, setUsers] = useState<any[]>([]);
  const [isPreLoading, setPreLoading] = useState(false);
  const columns = [
    { name: 'NAME', uid: 'name' },
    { name: 'EMAIL', uid: 'email' },
    // { name: 'PHONE', uid: 'phone' }
    // { name: 'STATUS', uid: 'status' },
    { name: 'REGISTERED', uid: 'createdAt' },
    { name: 'ACTIONS', uid: 'actions' }
  ];
  useAsyncEffect(async () => {
    setPreLoading(true);
    const result: any[] = await axiosClient.get('users');
    setUsers(result);
    setPreLoading(false);
  }, []);

  const renderCell = (user: UserType, columnKey: React.Key) => {
    // console.log(user.phone);
    const cellValue = user[columnKey];
    switch (columnKey) {
      case 'name':
        return (
          <div className="flex items-center">
            <UserAvatar name={cellValue} />
            <div className="ml-5">{user.name}</div>
          </div>
        );
      case 'email':
        return <>{user?.email}</>;
      case 'createdAt':
        return <div>{dayjs(user?.createdAt).format('DD/MM/YYYY')}</div>;
      // case 'role':
      //   return (
      //     <Col>
      //       <Row>
      //         <Text b size={14} css={{ tt: 'capitalize' }}>
      //           {cellValue}
      //         </Text>
      //       </Row>
      //       <Row>
      //         <Text b size={13} css={{ tt: 'capitalize', color: '$accents7' }}>
      //           {user?.team}
      //         </Text>
      //       </Row>
      //     </Col>
      //   );
      // case 'status':
      //   return <StyledBadge type={user?.status}>{cellValue}</StyledBadge>;

      case 'actions':
        return (
          <Row justify="center" align="center">
            <Col css={{ d: 'flex' }}>
              <span className="flex items-center w-[13.5rem] min-w-[13.5rem] text-[#616c7a]">
                <Tippy
                  arrow={true}
                  placement={'top'}
                  content={<Tooltip text={'Detail'} />}
                  delay={100}
                >
                  <span>
                    <EyeIcon className="h-5 w-5 text-gray-700 m-[0.4375rem] cursor-pointer" />
                  </span>
                </Tippy>
              </span>
            </Col>
            <Col css={{ d: 'flex' }}>
              <span className="flex items-center w-[13.5rem] min-w-[13.5rem] text-[#616c7a]">
                <Tippy
                  arrow={true}
                  placement={'top'}
                  content={<Tooltip text={'Edit'} />}
                  delay={100}
                >
                  <span>
                    <EditIcon className="h-5 w-5 text-gray-700 m-[0.4375rem] cursor-pointer" />
                  </span>
                </Tippy>
              </span>
            </Col>
            <Col css={{ d: 'flex' }}>
              <span className="flex items-center w-[13.5rem] min-w-[13.5rem] text-[#616c7a]">
                <Tippy
                  arrow={true}
                  placement={'top'}
                  content={<Tooltip text={'Delete'} />}
                  delay={100}
                >
                  <span>
                    <TrashIcon className="h-5 w-5 m-[0.4375rem] text-red-500" />
                  </span>
                </Tippy>
              </span>
            </Col>
          </Row>
        );
      default:
        return cellValue;
    }
  };

  return (
    <Layout admin>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col h-full overflow-hidden pt-14">
        <div className="h-14 fixed bg-white inset-x-0 top-0 flex shadow-sm z-[100]"></div>
        <div className="flex flex-row flex-1 overflow-hidden">
          <NavigationMenu />
          <div className="max-w-screen-xl flex-1 h-full max-h-full overflow-y-auto m-auto">
            {isPreLoading ? (
              <Loading />
            ) : (
              <>
                <div>
                  <Table
                    aria-label="Example table with custom cells"
                    css={{
                      height: 'auto',
                      minWidth: '100%',
                      boxShadow: 'none'
                    }}
                    selectionMode="none"
                  >
                    <Table.Header columns={columns}>
                      {(column: any) => (
                        <Table.Column
                          key={column.uid}
                          hideHeader={column.uid === 'actions'}
                          align={column.uid === 'actions' ? 'center' : 'start'}
                        >
                          {column.name}
                        </Table.Column>
                      )}
                    </Table.Header>
                    <Table.Body items={users}>
                      {(item: UserType) => (
                        <Table.Row>
                          {(columnKey: any) => (
                            <Table.Cell>
                              {renderCell(item, columnKey)}
                            </Table.Cell>
                          )}
                        </Table.Row>
                      )}
                    </Table.Body>
                  </Table>
                </div>
                <div className="flex justify-start mt-8">
                  <Pagination
                    total={12}
                    initialPage={1}
                    // className="pt-8 pr-4"
                  />
                </div>
              </>
            )}
          </div>
        </div>
      </main>
    </Layout>
  );
};

export default ListUserPage;
