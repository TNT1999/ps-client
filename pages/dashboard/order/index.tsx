import Head from 'next/head';
import { NextPage } from 'next';
import Layout from '@components/common/Layout';
import { useState, FunctionComponent, useEffect } from 'react';
import axiosClient from '@utils/api';
import useAsyncEffect from 'use-async-effect';
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  EditIcon,
  ExternalLinkIcon,
  EyeIcon,
  PlusIcon,
  SearchIcon,
  SpinnerIcon,
  TrashIcon
} from '@assets/icons';
import EmptyOrder from '../../../public/assets/images/empty-order.png';
import Tippy from '@tippyjs/react';
import Tooltip from '@components/common/Tooltip';
import { useRouter } from 'next/router';
import { formatMoney } from '@utils/index';
import dayjs from '@utils/dayjs';
import ReactPaginate from 'react-paginate';
import dynamic from 'next/dynamic';
import { delay } from '@utils/misc';
import { motion } from 'framer-motion';
import { OrderStatus } from '@types';
import classNames from 'classnames';
import { isEmpty } from 'lodash';
const NavigationMenu = dynamic(
  () => import('@components/admin/navigation/NavigationMenu'),
  {
    ssr: false
  }
);

type Props = any;
const Loading: FunctionComponent<any> = () => {
  return (
    <tr>
      <td
        colSpan={10}
        className="h-[50vh] w-full items-center justify-center bg-transparent select-none table-cell"
      >
        <div className="flex items-center justify-center">
          <SpinnerIcon className="animate-spin mr-2" /> Loading...
        </div>
      </td>
    </tr>
  );
};

// const items = [...Array(100).keys()];

const renderStatusOrder = (status: OrderStatus) => {
  switch (status) {
    case OrderStatus.WAIT_CONFIRMED:
      return (
        <p className="whitespace-no-wrap bg-[#ededed] text-[#707070] w-fit py-1 px-3 rounded-full">
          Chờ xác nhận
        </p>
      );
    case OrderStatus.SHIPPING:
      return (
        <p className="whitespace-no-wrap bg-[#fff19c] text-[#c59c08] w-fit py-1 px-3 rounded-full">
          Đang giao hàng
        </p>
      );
    case OrderStatus.SUCCESS:
      return (
        <p className="whitespace-no-wrap bg-green-200 text-green-600 w-fit py-1 px-3 rounded-full">
          Đã nhận hàng
        </p>
      );
    case OrderStatus.CANCELED:
      return (
        <p className="whitespace-no-wrap bg-red-500 text-gray-100 w-fit py-1 px-3 rounded-full">
          Đã huỷ đơn
        </p>
      );
  }
};
const ListOrdersPage: NextPage<Props> = ({ pageSize = 10 }) => {
  const [orders, setOrders] = useState<any[]>([]);
  const [isLoading, setLoading] = useState(false);

  const router = useRouter();
  const [statusOrder, setStatusOrder] = useState<OrderStatus>(
    router.query.status as any
  );
  const [page, setPage] = useState(1);
  const [itemsPerPage] = useState(10);
  const [itemOffset, setItemOffset] = useState(0);
  const [currentItems, setCurrentItems] = useState(null);
  const [pageCount, setPageCount] = useState(0);

  const [keyword, setKeyword] = useState('');

  useEffect(() => {
    setStatusOrder(router.query.status as any);
    setPage(parseInt((router.query.page as any) || 1));
  }, [router.query]);

  useAsyncEffect(async () => {
    setLoading(true);
    const getOrders = axiosClient.get('origin/orders', {
      params: {
        status: statusOrder,
        page: page
      }
    });
    const [result] = await Promise.all([getOrders, delay(500)]);
    setOrders(result as any);
    setLoading(false);
  }, [page, statusOrder]);

  // useEffect(() => {
  //   // Fetch items from another resources.
  //   const endOffset = itemOffset + itemsPerPage;
  //   console.log(`Loading items from ${itemOffset} to ${endOffset}`);
  //   setCurrentItems(items.slice(itemOffset, endOffset) as any);
  //   setPageCount(Math.ceil(items.length / itemsPerPage));
  // }, [itemOffset, itemsPerPage]);

  // Invoke when user click to request another page.
  // const handlePageClick = (event: any) => {
  //   const newOffset = (event.selected * itemsPerPage) % items.length;
  //   console.log(
  //     `User requested page number ${event.selected}, which is offset ${newOffset}`
  //   );
  //   setItemOffset(newOffset);
  // };

  const handleKeyPress = async (event: any) => {
    if (event.key === 'Enter') {
      console.log('enter press here! ');
      const result = await axiosClient.get(
        `origin/order/${keyword}/${statusOrder}`
      );
      setOrders(result as any);
    }
  };

  return (
    <Layout admin>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center overflow-auto md:h-[calc(100vh-4rem)] h-[calc(100vh-3.5rem)] bg-main">
        <div className="flex flex-row flex-1">
          <NavigationMenu />
          <div className="flex-1 h-full max-h-full overflow-y-auto">
            <div className="max-w-screen-xl m-auto h-full">
              <div className="p-4">
                <div className="flex items-center justify-between pb-8">
                  <div>
                    <h2 className="text-black font-medium text-xl">
                      Danh sách đơn hàng
                    </h2>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="flex bg-white items-center p-2.5 rounded-full shadow-sm w-80">
                      <SearchIcon className="h-6 w-6 text-gray-400" />
                      <input
                        onKeyDown={handleKeyPress}
                        className="outline-none ml-2 block w-full"
                        type="text"
                        name=""
                        id=""
                        placeholder="Search..."
                        onChange={(e) => setKeyword(e.target.value)}
                      />
                    </div>
                  </div>
                </div>

                <div className="rounded-lg overflow-hidden">
                  <div className="bg-white">
                    <nav className="flex flex-col sm:flex-row">
                      <button
                        className={classNames(
                          'py-4 px-6 block hover:text-blue-500 focus:outline-none  border-b-2 font-medium',
                          {
                            'border-blue-500 text-blue-500':
                              statusOrder === undefined,
                            'text-gray-600': statusOrder !== undefined
                          }
                        )}
                        onClick={() => {
                          setStatusOrder(undefined as any);
                          router.push('', undefined, { shallow: true });
                        }}
                      >
                        Tất cả
                      </button>
                      <button
                        className={classNames(
                          'py-4 px-6 block hover:text-blue-500 focus:outline-none  border-b-2 font-medium',
                          {
                            'border-blue-500 text-blue-500':
                              statusOrder === OrderStatus.WAIT_CONFIRMED,
                            'text-gray-600':
                              statusOrder !== OrderStatus.WAIT_CONFIRMED
                          }
                        )}
                        onClick={() => {
                          setStatusOrder(OrderStatus.WAIT_CONFIRMED);
                          router.push(
                            '/dashboard/order/?status=wait_confirm',
                            undefined,
                            {
                              shallow: true
                            }
                          );
                        }}
                      >
                        Chờ xác nhận
                      </button>
                      <button
                        className={classNames(
                          'py-4 px-6 block hover:text-blue-500 focus:outline-none  border-b-2 font-medium',
                          {
                            'border-blue-500 text-blue-500':
                              statusOrder === OrderStatus.SHIPPING,
                            'text-gray-600':
                              statusOrder !== OrderStatus.SHIPPING
                          }
                        )}
                        onClick={() => {
                          setStatusOrder(OrderStatus.SHIPPING);
                          router.push(
                            '/dashboard/order/?status=shipping',
                            undefined,
                            {
                              shallow: true
                            }
                          );
                        }}
                      >
                        Đang giao hàng
                      </button>
                      <button
                        className={classNames(
                          'py-4 px-6 block hover:text-blue-500 focus:outline-none  border-b-2 font-medium',
                          {
                            'border-blue-500 text-blue-500':
                              statusOrder === OrderStatus.SUCCESS,
                            'text-gray-600': statusOrder !== OrderStatus.SUCCESS
                          }
                        )}
                        onClick={() => {
                          setStatusOrder(OrderStatus.SUCCESS);
                          router.push(
                            '/dashboard/order/?status=success',
                            undefined,
                            {
                              shallow: true
                            }
                          );
                        }}
                      >
                        Đã nhận hàng
                      </button>
                      <button
                        className={classNames(
                          'py-4 px-6 block hover:text-blue-500 focus:outline-none  border-b-2 font-medium',
                          {
                            'border-blue-500 text-blue-500':
                              statusOrder === OrderStatus.CANCELED,
                            'text-gray-600':
                              statusOrder !== OrderStatus.CANCELED
                          }
                        )}
                        onClick={() => {
                          setStatusOrder(OrderStatus.CANCELED);
                          router.push(
                            '/dashboard/order/?status=cancel',
                            undefined,
                            {
                              shallow: true
                            }
                          );
                        }}
                      >
                        Đã huỷ
                      </button>
                    </nav>
                  </div>

                  <div className="bg-white w-full">
                    <div className="p-2 pt-4">
                      <div className="inline-block min-w-full rounded-lg overflow-hidden">
                        <table className="min-w-full leading-normal">
                          <thead>
                            <tr>
                              <th className="px-5 py-3 bg-blue-50 text-left font-semibold text-gray-600 tracking-wider rounded-l-lg w-1/6">
                                Order ID
                              </th>
                              <th className="px-5 py-3 bg-blue-50 text-left font-semibold text-gray-600 tracking-wider w-1/6">
                                Ordered Date
                              </th>
                              <th className="px-5 py-3 bg-blue-50 text-left font-semibold text-gray-600 tracking-wider">
                                Products Name
                              </th>
                              <th className="px-5 py-3 bg-blue-50 text-right font-semibold text-gray-600 tracking-wider w-1/6">
                                Total Price
                              </th>
                              <th className="px-5 py-3 bg-blue-50 font-semibold text-gray-600 tracking-wider w-1/6">
                                Status
                              </th>
                              <th className="px-5 py-3 bg-blue-50 text-right font-semibold text-gray-600 tracking-wider rounded-r-lg w-1/12">
                                Action
                              </th>
                            </tr>
                          </thead>
                          {isLoading ? (
                            <tbody>
                              <Loading />
                            </tbody>
                          ) : (
                            <motion.tbody
                              initial={{ opacity: 0 }}
                              animate={{ opacity: 1 }}
                              exit={{ opacity: 0 }}
                              transition={{ duration: 0.2 }}
                            >
                              {!isEmpty(orders) ? (
                                orders.map((order) => {
                                  return (
                                    <tr
                                      key={order.orderId}
                                      className="border-b border-gray-200 bg-white last:border-0"
                                    >
                                      <td className="px-5 py-5 bg-white">
                                        <div className="flex items-center flex-shrink-0">
                                          <p className="text-gray-900 whitespace-no-wrap">
                                            {`#${order.orderId}`}
                                          </p>
                                        </div>
                                      </td>
                                      <td className="px-5 py-5">
                                        <p className="text-gray-900 whitespace-no-wrap">
                                          {dayjs(order.createdAt).format(
                                            'DD/MM/YYYY'
                                          )}
                                        </p>
                                      </td>
                                      <td className="px-5 py-5">
                                        <p className="text-gray-900 whitespace-no-wrap">
                                          {`${order.products[0].name}`}
                                          {order.products.length > 1 &&
                                            ` và ${
                                              order.products.length - 1
                                            } sản phẩm khác`}
                                        </p>
                                      </td>
                                      <td className="px-5 py-5">
                                        <p className="text-gray-900 whitespace-no-wrap text-right">
                                          {formatMoney(order.finalTotal)}
                                        </p>
                                      </td>
                                      <td className="px-5 py-5">
                                        <div className="flex justify-center">
                                          {renderStatusOrder(order.orderStatus)}
                                        </div>
                                      </td>
                                      <td className="px-5 py-5">
                                        <div className="flex justify-end">
                                          <span className="flex items-center text-[#616c7a]">
                                            <Tippy
                                              arrow={true}
                                              placement={'top'}
                                              content={
                                                <Tooltip text={'View'} />
                                              }
                                              delay={100}
                                            >
                                              <span
                                                className="cursor-pointer"
                                                onClick={() =>
                                                  router.push(
                                                    `/dashboard/order/${order.orderId}`
                                                  )
                                                }
                                              >
                                                <EyeIcon className="h-5 w-5 text-gray-700 m-[0.4375rem]" />
                                              </span>
                                            </Tippy>
                                          </span>
                                        </div>
                                      </td>
                                    </tr>
                                  );
                                })
                              ) : (
                                <tr>
                                  <td
                                    colSpan={10}
                                    className="h-[50vh] w-full items-center justify-center bg-transparent select-none table-cell"
                                  >
                                    <div className="flex items-center justify-center flex-col">
                                      <img
                                        src={EmptyOrder}
                                        alt=""
                                        className="w-52 h-52"
                                      />
                                      Không có đơn hàng
                                    </div>
                                  </td>
                                </tr>
                              )}
                            </motion.tbody>
                          )}
                        </table>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              {/* <ReactPaginate
                breakLabel="..."
                onPageChange={handlePageClick}
                pageRangeDisplayed={3}
                pageCount={pageCount}
                className="flex justify-end h-10 mt-4 font-medium rounded-full select-none"
                activeClassName="bg-[#189eff]"
                activeLinkClassName="!text-white"
                pageLinkClassName="w-full h-full flex items-center justify-center text-black"
                previousLinkClassName="w-full h-full flex items-center justify-center text-black"
                nextLinkClassName="w-full h-full flex items-center justify-center text-black"
                breakClassName="w-10 block md:flex justify-center items-center cursor-pointer leading-5 transition duration-150 ease-in rounded-full text-base bg-white shadow-sm mr-1 !bg-transparent"
                pageClassName="w-10 block md:flex justify-center items-center cursor-pointer leading-5 transition duration-150 ease-in rounded-full text-base bg-white shadow-sm mr-1 hover:bg-[#c1e7ff]"
                previousClassName="w-10 block md:flex justify-center items-center cursor-pointer leading-5 transition duration-150 ease-in rounded-full text-base bg-white shadow-sm mr-1 !bg-transparent hover:bg-gray-500"
                nextClassName="w-10 block md:flex justify-center items-center cursor-pointer leading-5 transition duration-150 ease-in rounded-full text-base bg-white shadow-sm mr-1 !bg-transparent hover:bg-gray-500"
                renderOnZeroPageCount={() => null}
                disabledClassName="opacity-30"
                nextLabel={
                  <ChevronRightIcon className="h-5 w-5" aria-hidden="true" />
                }
                previousLabel={
                  <ChevronLeftIcon className="h-5 w-5" aria-hidden="true" />
                }
              /> */}
            </div>
          </div>
        </div>
      </main>
    </Layout>
  );
};

export default ListOrdersPage;
