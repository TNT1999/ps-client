import Head from 'next/head';
import { NextPage } from 'next';
import NavigationMenu from '@components/admin/navigation/NavigationMenu';
import Layout from '@components/common/Layout';
import { useState, FunctionComponent, useEffect } from 'react';
import axiosClient from '@utils/api';
import useAsyncEffect from 'use-async-effect';
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  EditIcon,
  ExternalLinkIcon,
  EyeIcon,
  PlusIcon,
  SearchIcon,
  SpinnerIcon,
  TrashIcon
} from '@assets/icons';
import Tippy from '@tippyjs/react';
import Tooltip from '@components/common/Tooltip';
import { useRouter } from 'next/router';
import { formatMoney } from '@utils/index';
import Link from 'next/link';
import dayjs from '@utils/dayjs';
import ReactPaginate from 'react-paginate';

type Props = any;

const Loading: FunctionComponent<any> = () => {
  return (
    <div className="h-full w-full flex items-center justify-center bg-transparent select-none">
      <div className="flex items-center">
        <SpinnerIcon className="animate-spin mr-2" /> Loading...
      </div>
    </div>
  );
};
const items = [...Array(100).keys()];

const ListOrdersPage: NextPage<Props> = () => {
  const [orders, setOrders] = useState<any[]>([]);
  // const [brands, setBrands] = useState<any[]>([]);
  const [isPreLoading, setPreLoading] = useState(false);

  const [itemsPerPage] = useState(10);
  const [itemOffset, setItemOffset] = useState(0);
  const [currentItems, setCurrentItems] = useState(null);
  const [pageCount, setPageCount] = useState(0);

  const router = useRouter();
  useAsyncEffect(async () => {
    setPreLoading(true);
    const [result] = await Promise.all([
      axiosClient.get('origin/orders?page=1')
      // axiosClient.get('brands')
    ]);
    setOrders(result as any);
    // setBrands(brands as any);
    setPreLoading(false);
  }, []);

  useEffect(() => {
    // Fetch items from another resources.
    const endOffset = itemOffset + itemsPerPage;
    console.log(`Loading items from ${itemOffset} to ${endOffset}`);
    setCurrentItems(items.slice(itemOffset, endOffset) as any);
    setPageCount(Math.ceil(items.length / itemsPerPage));
  }, [itemOffset, itemsPerPage]);

  // Invoke when user click to request another page.
  const handlePageClick = (event: any) => {
    const newOffset = (event.selected * itemsPerPage) % items.length;
    console.log(
      `User requested page number ${event.selected}, which is offset ${newOffset}`
    );
    setItemOffset(newOffset);
  };

  return (
    <Layout admin>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center overflow-auto md:h-[calc(100vh-4rem)] h-[calc(100vh-3.5rem)] bg-main">
        <div className="flex flex-row flex-1">
          <NavigationMenu />
          <div className="max-w-screen-xl flex-1 h-full max-h-full m-auto">
            {isPreLoading ? (
              <Loading />
            ) : (
              <div className="py-4">
                <div className="p-4">
                  <div className="flex items-center justify-between pb-8">
                    <div>
                      <h2 className="text-black font-medium text-xl">
                        Orders List
                      </h2>
                      {/* <span className="text-xs">All products item</span> */}
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="flex bg-white items-center p-2.5 rounded-full shadow-sm w-80">
                        <SearchIcon className="h-6 w-6 text-gray-400" />
                        <input
                          className="outline-none ml-2 block w-full"
                          type="text"
                          name=""
                          id=""
                          placeholder="Search..."
                        />
                      </div>
                      {/* <div className="lg:ml-40 ml-10 space-x-8 flex">
                        <button
                          className="px-4 py-2.5 rounded-md text-white bg-[#0042e8] cursor-pointer flex justify-center items-center"
                          onClick={() =>
                            router.push('/dashboard/product/create')
                          }
                        >
                          <PlusIcon className="mr-1 h-5 w-5 text-current" />
                          Add new Product
                        </button>
                      </div> */}
                    </div>
                  </div>

                  <div className="rounded-lg overflow-hidden">
                    <div className="bg-white">
                      <nav className="flex flex-col sm:flex-row">
                        <button className="text-gray-600 py-4 px-6 block hover:text-blue-500 focus:outline-none text-blue-500 border-b-2 font-medium border-blue-500">
                          All Orders
                        </button>
                        <button className="text-gray-600 py-4 px-6 block hover:text-blue-500 focus:outline-none">
                          Pending Orders
                        </button>
                        <button className="text-gray-600 py-4 px-6 block hover:text-blue-500 focus:outline-none">
                          Shipping Orders
                        </button>
                        <button className="text-gray-600 py-4 px-6 block hover:text-blue-500 focus:outline-none">
                          Complete Orders
                        </button>
                      </nav>
                    </div>

                    <div className="bg-white w-full">
                      <div className="p-2 pt-4">
                        <div className="inline-block min-w-full rounded-lg overflow-hidden">
                          <table className="min-w-full leading-normal">
                            <thead>
                              <tr>
                                <th className="px-5 py-3 bg-blue-50 text-left font-semibold text-gray-600 tracking-wider rounded-l-lg">
                                  Order ID
                                </th>
                                <th className="px-5 py-3 bg-blue-50 text-left font-semibold text-gray-600 tracking-wider">
                                  Ordered Date
                                </th>
                                <th className="px-5 py-3 bg-blue-50 text-left font-semibold text-gray-600 tracking-wider">
                                  Products Name
                                </th>
                                <th className="px-5 py-3 bg-blue-50 text-right font-semibold text-gray-600 tracking-wider">
                                  Total Price
                                </th>
                                <th className="px-5 py-3 bg-blue-50 font-semibold text-gray-600 tracking-wider">
                                  Status
                                </th>
                                <th className="px-5 py-3 bg-blue-50 text-right font-semibold text-gray-600 tracking-wider rounded-r-lg">
                                  Action
                                </th>
                              </tr>
                            </thead>
                            <tbody>
                              {orders.map((order, index) => {
                                return (
                                  <tr key={order.id}>
                                    <td className="px-5 py-5 border-b border-gray-200 bg-white">
                                      <div className="flex items-center flex-shrink-0">
                                        <p className="text-gray-900 whitespace-no-wrap">
                                          {`#${order.orderId}`}
                                        </p>
                                      </div>
                                    </td>
                                    <td className="px-5 py-5 border-b border-gray-200 bg-white">
                                      <p className="text-gray-900 whitespace-no-wrap">
                                        {dayjs(order.createdAt).format(
                                          'DD/MM/YYYY'
                                        )}
                                      </p>
                                    </td>
                                    <td className="px-5 py-5 border-b border-gray-200 bg-white">
                                      <p className="text-gray-900 whitespace-no-wrap">
                                        {`${order.products[0].name}`}
                                        {order.products.length > 1 &&
                                          ` and ${
                                            order.products.length - 1
                                          } other product${
                                            order.products.length - 1 > 1 && 's'
                                          }`}
                                      </p>
                                    </td>
                                    <td className="px-5 py-5 border-b border-gray-200 bg-white">
                                      <p className="text-gray-900 whitespace-no-wrap text-right">
                                        {formatMoney(order.finalTotal)}
                                      </p>
                                    </td>
                                    <td className="px-5 py-5 border-b border-gray-200 bg-white">
                                      <div className="flex justify-center">
                                        <p className="whitespace-no-wrap bg-green-200 text-green-600 w-fit py-1 px-3 rounded-full">
                                          Delivered
                                        </p>
                                      </div>
                                    </td>
                                    <td className="px-5 py-5 border-b border-gray-200 bg-white">
                                      <div className="flex justify-end">
                                        <span className="flex items-center text-[#616c7a]">
                                          <Tippy
                                            arrow={true}
                                            placement={'top'}
                                            content={<Tooltip text={'View'} />}
                                            delay={100}
                                          >
                                            <span>
                                              <Link
                                                href={`/dashboard/order/${order.orderId}`}
                                              >
                                                <a target="_blank">
                                                  <EyeIcon className="h-5 w-5 text-gray-700 m-[0.4375rem] cursor-pointer" />
                                                </a>
                                              </Link>
                                            </span>
                                          </Tippy>
                                        </span>

                                        {/* <span className="flex items-center text-[#616c7a]">
                                        <Tippy
                                          arrow={true}
                                          placement={'top'}
                                          content={<Tooltip text={'Edit'} />}
                                          delay={100}
                                        >
                                          <span>
                                            <EditIcon
                                              className="h-5 w-5 text-gray-700 m-[0.4375rem] cursor-pointer"
                                              onClick={() =>
                                                router.push(
                                                  `/dashboard/product/${product.slug}`
                                                )
                                              }
                                            />
                                          </span>
                                        </Tippy>
                                      </span>
                                      <span className="flex items-center text-[#616c7a]">
                                        <Tippy
                                          arrow={true}
                                          placement={'top'}
                                          content={<Tooltip text={'Delete'} />}
                                          delay={100}
                                        >
                                          <span>
                                            <TrashIcon className="h-5 w-5 m-[0.4375rem] text-red-500 cursor-pointer" />
                                          </span>
                                        </Tippy>
                                      </span> */}
                                      </div>
                                    </td>
                                  </tr>
                                );
                              })}
                            </tbody>
                          </table>
                          {/* <div className="px-5 py-5 bg-white border-t flex flex-col xs:flex-row items-center xs:justify-between          ">
                          <span className="text-xs xs:text-sm text-gray-900">
                            Showing 1 to 4 of 50 Entries
                          </span>
                          <div className="inline-flex mt-2 xs:mt-0">
                            <button className="text-sm text-indigo-50 transition duration-150 hover:bg-indigo-500 bg-indigo-600 font-semibold py-2 px-4 rounded-l">
                              Prev
                            </button>
                            &nbsp; &nbsp;
                            <button className="text-sm text-indigo-50 transition duration-150 hover:bg-indigo-500 bg-indigo-600 font-semibold py-2 px-4 rounded-r">
                              Next
                            </button>
                          </div>
                        </div> */}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <ReactPaginate
              breakLabel="..."
              onPageChange={handlePageClick}
              pageRangeDisplayed={3}
              pageCount={pageCount}
              className="flex justify-end h-10 font-medium rounded-full mt-4 select-none"
              activeClassName="bg-[#189eff]"
              activeLinkClassName="!text-white"
              pageLinkClassName="w-full h-full flex items-center justify-center text-black"
              previousLinkClassName="w-full h-full flex items-center justify-center text-black"
              nextLinkClassName="w-full h-full flex items-center justify-center text-black"
              breakClassName="w-10 block md:flex justify-center items-center cursor-pointer leading-5 transition duration-150 ease-in rounded-full text-base bg-white shadow-sm mr-1 !bg-transparent"
              pageClassName="w-10 block md:flex justify-center items-center cursor-pointer leading-5 transition duration-150 ease-in rounded-full text-base bg-white shadow-sm mr-1 hover:bg-[#c1e7ff]"
              previousClassName="w-10 block md:flex justify-center items-center cursor-pointer leading-5 transition duration-150 ease-in rounded-full text-base bg-white shadow-sm mr-1 !bg-transparent hover:bg-gray-500"
              nextClassName="w-10 block md:flex justify-center items-center cursor-pointer leading-5 transition duration-150 ease-in rounded-full text-base bg-white shadow-sm mr-1 !bg-transparent hover:bg-gray-500"
              renderOnZeroPageCount={() => null}
              disabledClassName="opacity-30"
              nextLabel={
                <li>
                  <ChevronRightIcon className="h-5 w-5" aria-hidden="true" />
                </li>
              }
              previousLabel={
                <li>
                  <ChevronLeftIcon className="h-5 w-5" aria-hidden="true" />
                </li>
              }
            />
          </div>
        </div>
      </main>
    </Layout>
  );
};

export default ListOrdersPage;
