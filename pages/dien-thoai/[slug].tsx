import Head from 'next/head';
import { NextPage, NextPageContext } from 'next';
import { RootState, Store } from '@app/store';
import { setSelectedProduct } from '@app/slice/homeSlice';
import Breadcrumb from '@components/breadcrumb';
import axiosClient from 'utils/api';
import ProductCarousel from '@components/carousel';
import { DetailProductType } from '@types';
import DeviceInfo from '@components/product-detail/DeviceInfo';
import Divider from '@components/common/Divider';
import MainInfo from '@components/product-detail/MainInfo';
import QuestionBox from '@components/product-detail/QuestionBox';
import ReviewBox from '@components/product-detail/review/ReviewBox';
import Layout from '@components/common/Layout';
import { useCallback, useEffect, useState } from 'react';
import useUnloadBeacon from 'hooks/useUnloadBeacon';
import Pagination from '@components/common/Pagination';
import useAsyncEffect from 'use-async-effect';
import { useSelector } from 'react-redux';

type Props = {
  product: DetailProductType | undefined;
};

const Phone: NextPage<Props> = ({ product }) => {
  if (!product) {
    return <div>Error</div>;
  }
  const { name, slug, attrs } = product;
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const currentUser = useSelector((state: RootState) => state.auth.user);
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const [carouselRef, setCarouselRef] = useState(null);
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const [images, setImages] = useState<string[]>([]);

  // eslint-disable-next-line react-hooks/rules-of-hooks
  const handleRef = useCallback(
    (ref) => {
      setCarouselRef(ref);
    },
    [product]
  );

  // // eslint-disable-next-line react-hooks/rules-of-hooks
  // useUnloadBeacon(
  //   {
  //     url: 'http://localhost:8000/api/track',
  //     startTime: new Date().getTime(),
  //     payload: (startTime: number, endTime: number, productId: string) => ({
  //       productId,
  //       time:
  //         Math.round(Math.abs(endTime - startTime) / 1000) > 120
  //           ? '120'
  //           : Math.round(Math.abs(endTime - startTime) / 1000).toString()
  //     })
  //   },
  //   product.id
  // );

  // // eslint-disable-next-line react-hooks/rules-of-hooks
  // useEffect(() => {
  //   const pageViewTime = new Date().getTime();
  //   return () => {
  //     const time = Math.round(
  //       Math.abs(new Date().getTime() - pageViewTime) / 1000
  //     );
  //     fetch('http://localhost:8000/api/track', {
  //       method: 'POST',
  //       headers: {
  //         'Content-Type': 'application/json'
  //       },
  //       body: JSON.stringify({
  //         productId: product.id,
  //         time: time > 120 ? '120' : time.toString()
  //       })
  //     });
  //   };
  // }, [product.id]);

  // eslint-disable-next-line react-hooks/rules-of-hooks
  useAsyncEffect(async () => {
    if (currentUser) {
      await axiosClient.get(`/${product.id}/viewed`);
    }
  }, [product.id]);

  // eslint-disable-next-line react-hooks/rules-of-hooks
  useEffect(() => {
    const images = product.colorOptions.reduce(
      (accumulator: string[], current) => {
        current.images.map((image) => {
          accumulator.push(image);
        });
        return accumulator;
      },
      []
    );
    setImages(images);
  }, [product]);

  return (
    <Layout>
      <Head>
        <title>{name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center overflow-auto h-main bg-main">
        <div className="max-w-screen-xl w-full px-4">
          <div className="p-4 justify-center flex-col flex gap-x-4 bg-white">
            <Breadcrumb
              breadcrumbs={[
                { value: 'Điện thoại', href: '/dien-thoai' },
                { value: name, href: slug }
              ]}
            />
            <Divider className="mt-0 mb-4" />
            <div className="flex rounded">
              <div className="flex-1 flex flex-col">
                <div className="flex flex-row">
                  <div className="detail_product_left w-[28rem] p-4 pr-0">
                    <div className="product-gallery">
                      <ProductCarousel images={images} handleRef={handleRef} />
                    </div>
                  </div>
                  <div className="mx-4 w-px bg-[#f2f2f2] shrink-0"></div>
                  <div className="flex flex-1 justify-between pt-6">
                    <div className="flex-1 py-4">
                      <MainInfo
                        product={product}
                        carouselRef={carouselRef}
                        images={images}
                      />
                    </div>
                  </div>
                </div>
                <div>
                  <ReviewBox
                    pid={product.id}
                    listReview={product.reviews}
                    ratingValue={product.ratingValue}
                    ratingByStar={product.ratingByStar}
                    reviewCount={product.reviewCount}
                  />
                </div>
                <div>
                  <QuestionBox />
                </div>
              </div>
              <div className="w-[345px] pr-6 pb-5">
                <DeviceInfo attrs={attrs} />
              </div>
            </div>
          </div>
        </div>
      </main>
    </Layout>
  );
};

Phone.getInitialProps = async (context: NextPageContext & { store: Store }) => {
  const { slug } = context.query;
  try {
    const product: DetailProductType = await axiosClient.get(`product/${slug}`);
    context.store.dispatch(setSelectedProduct(product));
    return {
      product
    };
  } catch (err) {
    return {
      product: undefined
    };
  }
};
export default Phone;
