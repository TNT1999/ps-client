import Head from 'next/head';
import Filter from '../../components/Filter';
import ProductCard from '../../components/ProductCard';
import axios from 'axios';
import useSWR, { SWRResponse } from 'swr';
import { NextPage, NextPageContext } from 'next';
import { Store } from '../../app/store';
import { setListHomeProduct, setFilter } from '../../app/slice/homeSlice';
import { convertQueryNextToFilterArray } from '../../utils';

type Product = {
  name: string;
  slug: string;
  thumbnail: string;
  price: any;
  reviewCount: number;
  ratingValue: number;
};
type Props = {
  products: Product[];
};

const fetcher = (url: string) =>
  axios.get(url).then((res) => res.data.products);

const Home: NextPage<Props> = ({ products = [] }) => {
  // revalidateOnMount automatic revalidation when component is mounted
  // (by default revalidation occurs on mount when initialData is not set, use this flag to force behavior)
  console.log(`${process.env.NEXT_PUBLIC_API_ENDPOINT}/products`);
  const { data, error } = useSWR(
    `${process.env.NEXT_PUBLIC_API_ENDPOINT}/products`,
    fetcher,
    { initialData: products, revalidateOnFocus: false }
  );
  if (!data) return <div>Loading...</div>;
  if (error) return <div>there is an error!</div>;

  // const [data,setdata] = useState([])
  // console.log(data)
  // useEffect(()=>{
  //   fetcher(`${process.env.NEXT_PUBLIC_API_ENDPOINT}/product`).then((data)=>setdata(data))
  // },[])

  return (
    <>
      <Head>
        <title>Điện thoại</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center overflow-auto h-main">
        <div className="max-w-screen-xl w-full">
          <div className="py-6 px-4 justify-center flex gap-x-4">
            <Filter className="flex-4" />
            <div className="flex-19 h-full w-full flex flex-wrap">
              {data.map((product: Product, index: number) => {
                return <ProductCard key={index} product={product} />;
              })}
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

Home.getInitialProps = async (context: NextPageContext & { store: Store }) => {
  const filter = context.query;

  if (JSON.stringify(filter) !== '{}') {
    convertQueryNextToFilterArray(filter);
    context.store.dispatch(setFilter(filter));
  } else {
    context.store.dispatch(
      setFilter({
        brand: [],
        price: [],
        ram: [],
        storage: [],
        display: []
      })
    );
  }
  try {
    const res = await axios.get(
      `${process.env.NEXT_PUBLIC_API_ENDPOINT}/products`
    );
    // const reduxStore = initializeStore({})
    // const { dispatch } = reduxStore
    context.store.dispatch(setListHomeProduct(res.data.products));
    // console.log('dp listhomePd', reduxStore.getState())
    return {
      products: res.data.products
    };
  } catch (err) {
    return {
      products: []
    };
  }
};
export default Home;
