/* eslint-disable react-hooks/rules-of-hooks */
import Head from 'next/head';
import Filter from '@components/filter';
import ProductCard from '@components/product-card';
import axios from 'axios';
import useSWR from 'swr';
import { NextPage, NextPageContext } from 'next';
import { RootState, Store } from '@app/store';
import { setListHomeProduct, setFilter } from '@app/slice/homeSlice';
import { customQueryString, Query2FilterArray } from '@utils/index';
import isEmpty from 'lodash/isEmpty';
import axiosClient from 'utils/api';
import { ProductType } from '@types';
import LoadingOverlay from '@components/common/LoadingOverlay';
import Layout from '@components/common/Layout';
import { useCallback, useEffect } from 'react';
import debounce from 'lodash/debounce';
import size from 'lodash/size';
import pickBy from 'lodash/pickBy';
import { useSelector } from 'react-redux';
import { useUpdateEffect, useGeolocation } from 'react-use';
type Props = {
  products: ProductType[];
};

const fetcher = (url: string) => axios.get(url).then((res) => res.data);

const Home: NextPage<Props> = ({ products = [] }) => {
  // revalidateOnMount automatic revalidation when component is mounted
  // (by default revalidation occurs on mount when initialData is not set, use this flag to force behavior)
  // console.log(`${process.env.NEXT_PUBLIC_API_ENDPOINT}/products`);
  const { data, error, mutate } = useSWR(
    `${process.env.NEXT_PUBLIC_API_URL}/products`,
    fetcher,
    {
      initialData: products,
      revalidateOnFocus: false,
      revalidateOnMount: false
    }
  );
  const filter = useSelector((state: RootState) => state.home.filter);
  if (!data) return <LoadingOverlay />;
  if (error) return <div>there is an error!</div>;
  // const state = useGeolocation();

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const fetch = useCallback(
    debounce(async (filter) => {
      const removedEmptyFilter = pickBy(filter, size);
      // console.log('removed', removedEmptyFilter, filter);
      if (isEmpty(removedEmptyFilter)) {
        const products: any = await axiosClient.get('/products');
        mutate(products, false);
        return;
      }
      const qs = customQueryString.stringify(removedEmptyFilter);
      const products = await axiosClient.get(`/filterProduct?${qs}`);
      mutate(products, false);
    }, 800),
    [filter]
  );

  // eslint-disable-next-line react-hooks/rules-of-hooks
  useUpdateEffect(() => {
    fetch(filter);
  }, [filter]);

  return (
    <Layout>
      <Head>
        <title>Điện thoại</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center overflow-auto h-main bg-main z-20">
        <div className="max-w-screen-xl w-full px-4">
          <div className="py-4 justify-center flex bg-white">
            {/* <pre>{JSON.stringify(state, null, 2)}</pre> */}
            <Filter className="w-52 border-r-px border-[#f7f7f7]" />
            <div className="flex-19 h-full w-full flex flex-wrap gap-2">
              {data.map((product: ProductType, index: number) => {
                return <ProductCard key={index} product={product} />;
              })}
            </div>
          </div>
        </div>
      </main>
    </Layout>
  );
};

Home.getInitialProps = async (context: NextPageContext & { store: Store }) => {
  const filter = context.query;
  if (!isEmpty(filter)) {
    Query2FilterArray(filter);
    context.store.dispatch(setFilter(filter));
  } else {
    context.store.dispatch(
      setFilter({
        brand: [],
        price: [],
        ram: [],
        storage: [],
        display: []
      })
    );
  }
  try {
    if (isEmpty(filter)) {
      const products: any = await axiosClient.get('/products');
      context.store.dispatch(setListHomeProduct(products));
      return { products };
    }
    const qs = customQueryString.stringify(filter);
    const products: any = await axiosClient.get(`/filterProduct?${qs}`);
    context.store.dispatch(setListHomeProduct(products));
    return {
      products
    };
  } catch (err) {
    return {
      products: []
    };
  }
};
export default Home;
