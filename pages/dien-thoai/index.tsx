import Head from 'next/head';
import Filter from '@components/filter';
import ProductCard from '@components/product-card';
import axios from 'axios';
import useSWR from 'swr';
import { NextPage, NextPageContext } from 'next';
import { Store } from '@app/store';
import { setListHomeProduct, setFilter } from '@app/slice/homeSlice';
import { Query2FilterArray } from '@utils/index';
import isEmpty from 'lodash/isEmpty';
import axiosClient from 'utils/api';
import { ProductType } from 'types';
import LoadingOverlay from '@components/common/LoadingOverlay';

type Props = {
  products: ProductType[];
};

const fetcher = (url: string) => axios.get(url).then((res) => res.data);

const Home: NextPage<Props> = ({ products = [] }) => {
  // revalidateOnMount automatic revalidation when component is mounted
  // (by default revalidation occurs on mount when initialData is not set, use this flag to force behavior)
  // console.log(`${process.env.NEXT_PUBLIC_API_ENDPOINT}/products`);
  const { data, error } = useSWR(
    `${process.env.NEXT_PUBLIC_API_URL}/products`,
    fetcher,
    {
      initialData: products,
      revalidateOnFocus: false,
      revalidateOnMount: false
    }
  );
  if (!data) return <LoadingOverlay />;
  if (error) return <div>there is an error!</div>;

  return (
    <>
      <Head>
        <title>Điện thoại</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center overflow-auto h-main">
        <div className="max-w-screen-xl w-full">
          <div className="py-4 px-10 justify-center flex gap-x-4">
            <Filter className="flex-4 max-w-[200px]" />
            <div className="flex-19 h-full w-full flex flex-wrap gap-2">
              {data.map((product: ProductType, index: number) => {
                return <ProductCard key={index} product={product} />;
              })}
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

Home.getInitialProps = async (context: NextPageContext & { store: Store }) => {
  const filter = context.query;

  if (!isEmpty(filter)) {
    Query2FilterArray(filter);
    context.store.dispatch(setFilter(filter));
  } else {
    context.store.dispatch(
      setFilter({
        brand: [],
        price: [],
        ram: [],
        storage: [],
        display: []
      })
    );
  }
  try {
    const products: any = await axiosClient.get('/products');
    context.store.dispatch(setListHomeProduct(products));
    return {
      products
    };
  } catch (err) {
    return {
      products: []
    };
  }
};
export default Home;
