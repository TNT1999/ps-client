import Head from 'next/head';
import ProductCard from '@components/product-card';
import axios from 'axios';
import useSWR from 'swr';
import { NextPage, NextPageContext } from 'next';
import { ProductType } from '@types';
import axiosClient from '@utils/api';
import Layout from '@components/common/Layout';
import { useRouter } from 'next/router';

// import { Store } from '../../app/store';
// import { setListHomeProduct, setFilter } from '../../app/slice/homeSlice';
// import { convertQueryNextToFilterArray } from '../../utils';

type Props = {
  products: ProductType[];
  // keyword:string
};

const fetcher = (url: string) =>
  axios.get(url).then((res) => res.data.searchProducts);

const SearchPage: NextPage<Props> = ({ products = [] }) => {
  // revalidateOnMount automatic revalidation when component is mounted
  // (by default revalidation occurs on mount when initialData is not set, use this flag to force behavior)
  // const { data, error } = useSWR(
  //   `${process.env.NEXT_PUBLIC_API_ENDPOINT}/products/search`,
  //   fetcher,
  //   { initialData: products, revalidateOnFocus: false }
  // );
  const router = useRouter();
  const keyword = router.query.q;
  if (!products) return <div>Loading...</div>;
  // if (error) return <div>there is an error!</div>;

  return (
    <Layout>
      <Head>
        <title>Điện thoại</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center overflow-auto h-main">
        <div className="max-w-screen-xl w-full px-4">
          <div className="py-4 px-10 justify-center flex flex-col gap-x-4">
            <h2 className="text-xl mb-4">{`Kết quả tìm kiếm "${keyword}"`}</h2>
            <div className="flex-19 h-full w-full flex flex-wrap">
              {products.map((product: ProductType, index: number) => {
                return <ProductCard key={index} product={product} />;
              })}
            </div>
          </div>
        </div>
      </main>
    </Layout>
  );
};

SearchPage.getInitialProps = async (context: NextPageContext) => {
  const keyword = context.query?.q;
  // console.log(keyword)
  // if(JSON.stringify(filter) !== '{}'){
  //   convertQueryNextToFilterArray(filter)
  //   context.store.dispatch(setFilter(filter))
  // }
  // else{
  //   context.store.dispatch(setFilter({
  //     brand: [],
  //     price: [],
  //     ram: [],
  //     storage: [],
  //     display: []
  //   }))
  // }
  console.log(keyword);
  try {
    const result = await axiosClient.get(`product?q=${keyword}&l=100`);

    // const reduxStore = initializeStore({})
    // const { dispatch } = reduxStore
    // context.store.dispatch(setListHomeProduct(res.data.products))
    // console.log('dp listhomePd', reduxStore.getState())
    return {
      products: result as any
      // keyword:keyword
    };
  } catch (err) {
    return {
      products: []
      // keyword:keyword
    };
  }
};
export default SearchPage;
