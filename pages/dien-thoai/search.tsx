import Head from 'next/head';
import Filter from '../../components/filter';
import ProductCard from '../../components/product-card';
import axios from 'axios';
import useSWR from 'swr';
import { NextPage, NextPageContext } from 'next';

import { Store } from '../../app/store';
import { setListHomeProduct, setFilter } from '../../app/slice/homeSlice';
import { convertQueryNextToFilterArray } from '../../utils';

type Product = {
  name: string;
  slug: string;
  thumbnail: string;
  price: any;
  reviewCount: number;
  ratingValue: number;
};
interface IProps {
  products: Product[];
  // keyword:string
}

const fetcher = (url: string) =>
  axios.get(url).then((res) => res.data.searchProducts);

const SearchPage: NextPage<IProps> = ({ products = [] }) => {
  // revalidateOnMount automatic revalidation when component is mounted
  // (by default revalidation occurs on mount when initialData is not set, use this flag to force behavior)
  const { data, error } = useSWR(
    `${process.env.NEXT_PUBLIC_API_ENDPOINT}/products/search`,
    fetcher,
    { initialData: products, revalidateOnFocus: false }
  );
  if (!data) return <div>Loading...</div>;
  if (error) return <div>there is an error!</div>;

  return (
    <>
      <Head>
        <title>Điện thoại</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center overflow-auto h-main">
        <div className="max-w-screen-xl w-full">
          <div className="py-6 px-4 justify-center flex gap-x-4">
            {/* <Filter className='flex-4' /> */}
            <div className="flex-19 h-full w-full flex flex-wrap">
              {data.map((product: Product, index: number) => {
                return <ProductCard key={index} product={product} />;
              })}
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

SearchPage.getInitialProps = async (context: NextPageContext) => {
  const keyword = context.query?.q;
  // console.log(keyword)
  // if(JSON.stringify(filter) !== '{}'){
  //   convertQueryNextToFilterArray(filter)
  //   context.store.dispatch(setFilter(filter))
  // }
  // else{
  //   context.store.dispatch(setFilter({
  //     brand: [],
  //     price: [],
  //     ram: [],
  //     storage: [],
  //     display: []
  //   }))
  // }
  try {
    const res = await axios.get(
      `${process.env.NEXT_PUBLIC_API_ENDPOINT}/products/search/${keyword}`
    );
    // const reduxStore = initializeStore({})
    // const { dispatch } = reduxStore
    // context.store.dispatch(setListHomeProduct(res.data.products))
    // console.log('dp listhomePd', reduxStore.getState())
    return {
      products: res.data.searchProducts
      // keyword:keyword
    };
  } catch (err) {
    return {
      products: []
      // keyword:keyword
    };
  }
};
export default SearchPage;
